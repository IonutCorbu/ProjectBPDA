// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;

pub struct AssigningStudentsProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for AssigningStudentsProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = AssigningStudentsProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        AssigningStudentsProxyMethods { wrapped_tx: tx }
    }
}

pub struct AssigningStudentsProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> AssigningStudentsProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    pub fn init<
        Arg0: ProxyArg<TokenIdentifier<Env::Api>>,
    >(
        self,
        token_identifier: Arg0,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .argument(&token_identifier)
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> AssigningStudentsProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn upgrade(
        self,
    ) -> TxTypedUpgrade<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_upgrade()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> AssigningStudentsProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn test_results<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u64> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("test_results")
            .argument(&address)
            .original_result()
    }

    pub fn generate_test(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, [[u8; 6]; 5]> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("generate_test")
            .original_result()
    }

    pub fn submit_test<
        Arg0: ProxyArg<[u8; 6]>,
    >(
        self,
        answers: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, [[u8; 12]; 5]> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("submit_test")
            .argument(&answers)
            .original_result()
    }

    pub fn get_results<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, Option<u64>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getResults")
            .argument(&address)
            .original_result()
    }
}
